{"ast":null,"code":"import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n    this.doSignInWithFacebook = () => this.auth.signInWithPopup(this.facebookProvider);\n\n    this.doSignInWithTwitter = () => this.auth.signInWithPopup(this.twitterProvider);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doSendEmailVerification = () => this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          } // merge auth and db user\n\n\n          authUser = {\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData,\n            ...dbUser\n          };\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.users = () => this.db.ref('users');\n\n    this.message = uid => this.db.ref(`messages/${uid}`);\n\n    this.messages = () => this.db.ref('messages');\n\n    this.Controller = (cid, did) => this.db.ref(`${did}/Controller/${cid}`);\n\n    this.Status = (cid, did) => this.db.ref(`${did}/Status/${cid}`);\n\n    app.initializeApp(config);\n    /* Helper */\n\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.database();\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  } // *** Auth API ***\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/home/gedi/Desktop/IOT-BBMS_Soft/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","db","ref","users","message","messages","Controller","cid","did","Status","initializeApp","serverValue","database","ServerValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    /* Helper */\n\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.database();\n\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () =>\n    this.auth.signInWithPopup(this.twitterProvider);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = (email) =>\n    this.auth.sendPasswordResetEmail(email);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n    });\n\n  doPasswordUpdate = (password) =>\n    this.auth.currentUser.updatePassword(password);\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .once('value')\n          .then((snapshot) => {\n            const dbUser = snapshot.val();\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            }\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** User API ***\n\n  user = (uid) => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref('users');\n\n  // *** Message API ***\n\n  message = (uid) => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref('messages');\n\n  // authUser_deviceID = this.authUser.deviceId;\n\n  Controller = (cid, did) => this.db.ref(`${did}/Controller/${cid}`);\n  Status = (cid, did) => this.db.ref(`${did}/Status/${cid}`);\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}